#include "robot-config.h"
#include <iostream>
#include <string>
#include <iomanip> // setprecision
#include <sstream>
//https://help.vex.com/article/68-vcs-example-program-vex-c-v5-clawbot-driving-forward-and-backward
//https://www.vexforum.com/index.php/34446-vex-c-how-to-multitask/0
//http://help.vexcodingstudio.com/#pro/namespacevex/classvex_1_1motor/startRotateTo

int inverse = 1;


class Claw{
    public:
        Claw(){
            ClawMotor.setRotation(0,rotationUnits::deg);
        }
    void clawOperation(){
        while (true){
            if (Controller1.ButtonX.pressing()){
                ClawMotor.rotateTo(ClawMotor.rotation(rotationUnits::deg)+175,rotationUnits::deg,60,velocityUnits::pct,false);
                vex::task::sleep(1500);
            }
        }
    }
};

class Lift{

    public:
    int pos[3];
    //int timeRun = 0;
    int currentLiftIndex = 0;
    bool sleep = false;
    int intialError = -60;
    Lift(){
      LiftMotor1.setRotation(0,rotationUnits::deg);
      LiftMotor2.setRotation(0,rotationUnits::deg);
      pos[0] = 0; pos[1] = 200; pos[2] = 420;
    }
    void lowerLift(void){
        if (currentLiftIndex != 0){
          currentLiftIndex = currentLiftIndex -1;
        } else {
            //timeRun ++;
        }
    }
    void raiseLift(void){
        if (currentLiftIndex != 2){
            currentLiftIndex = currentLiftIndex+1;
        } else {
            //timeRun ++;
        }
    }
    int liftOperation(){
            if (Controller1.ButtonL2.pressing()){
                lowerLift();
                vex::task::sleep(1);
            }
            if (Controller1.ButtonR2.pressing()){
                raiseLift();

                vex::task::sleep(1);
            }
            //Controller1.ButtonR2.pressed(lowerLift());
            //Controller1.ButtonL2.pressed(raiseLift(void));
            if ( (currentLiftIndex != 0) ){
                sleep = false;
                 LiftMotor1.startRotateTo(pos[currentLiftIndex], rotationUnits::deg,50,velocityUnits::pct);
                LiftMotor2.startRotateTo(pos[currentLiftIndex], rotationUnits::deg,50,velocityUnits::pct);
                vex::task::sleep(300);
            } else if (sleep == false){
                //LiftMotor1.startRotateFor(-100,rotationUnits::deg,50,velocityUnits::pct);
                //LiftMotor2.startRotateFor(-100,rotationUnits::deg,50,velocityUnits::pct);
                LiftMotor1.startRotateTo(pos[currentLiftIndex], rotationUnits::deg,120,velocityUnits::pct);
                 LiftMotor2.startRotateTo(pos[currentLiftIndex], rotationUnits::deg,120,velocityUnits::pct);
                vex::task::sleep(300);
                LiftMotor1.setRotation(0,rotationUnits::deg);
                LiftMotor2.setRotation(0,rotationUnits::deg);
                sleep = true;
            }
            if ((sleep == true) && !(Controller1.ButtonL2.pressing()) && !(Controller1.ButtonR2.pressing())){
                LiftMotor1.stop();
                LiftMotor2.stop();
            } else if (Controller1.ButtonL2.pressing()) {
                 LiftMotor1.spin(directionType::rev,100, velocityUnits::pct);
                LiftMotor2.spin(directionType::rev,100, velocityUnits::pct);
                //LiftMotor1.setRotation(0,rotationUnits::deg);
                //LiftMotor2.setRotation(0,rotationUnits::deg);
            } else if (Controller1.ButtonR2.pressing() && (currentLiftIndex == 2)){
                LiftMotor1.spin(directionType::fwd,100, velocityUnits::pct);
                LiftMotor2.spin(directionType::fwd,100, velocityUnits::pct);
            }
            Brain.Screen.setCursor(7,1);
            Brain.Screen.print("CurrentLiftIndex =%d",currentLiftIndex);
            Brain.Screen.render();

        return 0;
    }
    int manualLift(){
        if ((Controller1.ButtonR2.pressing()) || (Controller1.ButtonL2.pressing())){
            if (Controller1.ButtonR2.pressing()){
                LiftMotor1.spin(directionType::fwd,100, velocityUnits::pct);
                LiftMotor2.spin(directionType::fwd,100, velocityUnits::pct);
            }
            if (Controller1.ButtonL2.pressing()){
                LiftMotor1.spin(directionType::rev,100, velocityUnits::pct);
                LiftMotor2.spin(directionType::rev,100, velocityUnits::pct);

            }
        }
        else{
            LiftMotor1.stop();
            LiftMotor2.stop();
        }
        return 0;
    }

};

class Drive{
    public:
    void rotateBack(){
        inverse = (-1)*inverse;
        double angle = 642;
        FrontLeft.setRotation(0, rotationUnits::deg);
        FrontRight.setRotation(0, rotationUnits::deg);
        BackLeft.setRotation(0, rotationUnits::deg);
        BackRight.setRotation(0, rotationUnits::deg);
        FrontLeft.rotateFor(angle,rotationUnits::deg,100,velocityUnits::pct,false);
        FrontRight.rotateFor(angle,rotationUnits::deg,100,velocityUnits::pct,false);
        BackLeft.rotateFor(angle,rotationUnits::deg,100,velocityUnits::pct,false);
        BackRight.rotateFor(angle,rotationUnits::deg,100,velocityUnits::pct,false);
        //vex::task::sleep(200);
    }
    int driveOperation(){
        while (true){
            //Power Mode
            double power = 0.5+Controller1.Axis2.position(percentUnits::pct)/100;
            //Joystick
            double y = 1.2*(Controller1.Axis3.position(percentUnits::pct));
            double x = 1.2*(Controller1.Axis4.position(percentUnits::pct));
            double r = 0;// (Controller1.Axis1.position(percentUnits::pct));
            //Tank Rotation
            if (Controller1.ButtonA.pressing()){
                r = 35;
            }
            if (Controller1.ButtonY.pressing()){
                r = (-35);
            }
            //Tank Drive
            if (Controller1.ButtonUp.pressing()){
                y = 60;
            }
            if (Controller1.ButtonDown.pressing()){
                y = (-60);
            }
            if (Controller1.ButtonRight.pressing()){
                x = 60;
            }
            if (Controller1.ButtonLeft.pressing()){
                x = (-60);
            }
            double threshold = 5;
                if (abs(x) < threshold) {
                x = 0;
            }
            if (abs(y) < threshold) {
                y = 0;
            }

            if (Controller1.ButtonB.pressing()){
                rotateBack();
                vex::task::sleep(1100);
            }
            if ( (abs(x) > threshold) || (abs(y) > threshold) || (abs(r)>0)){
                FrontLeft.spin(directionType::fwd, power*inverse*(y+x+r), velocityUnits::pct);
                FrontRight.spin(directionType::fwd, power*inverse*(-y+x+r), velocityUnits::pct);
                BackRight.spin(directionType::fwd, power*inverse*(-y-x+r), velocityUnits::pct);
                BackLeft.spin(directionType::fwd, power*inverse*(y-x+r), velocityUnits::pct);
            } else{
                FrontLeft.stop();
                FrontRight.stop();
                BackRight.stop();
                BackLeft.stop();
            }
            Controller1.Screen.print( "x = %f", x);
            Controller1.Screen.setCursor( 2, 1 );
            Controller1.Screen.print( "y = %f", y);
            Controller1.Screen.setCursor( 3, 1 );
            Controller1.Screen.print( "r = %f", r);
            Brain.Screen.clearLine(1,color::black);
            Brain.Screen.setCursor(1,1);
            Brain.Screen.print("FL = %f", FrontLeft.rotation(rotationUnits::deg));
            Brain.Screen.clearLine(2,color::black);
            Brain.Screen.setCursor(2,1);
            Brain.Screen.print("FR = %f", FrontRight.rotation(rotationUnits::deg));
            Brain.Screen.clearLine(3,color::black);
            Brain.Screen.setCursor(3,1);
            Brain.Screen.print("BL = %f", BackLeft.rotation(rotationUnits::deg));
            Brain.Screen.clearLine(4,color::black);
            Brain.Screen.setCursor(4,1);
            Brain.Screen.print("BR = %f", BackRight.rotation(rotationUnits::deg));
            Brain.Screen.setCursor(5,1);
            Brain.Screen.print("Lift1 = %f", LiftMotor1.rotation(rotationUnits::deg));
            Brain.Screen.render();
            Brain.Screen.setCursor(6,1);
            Brain.Screen.print("Lift2 = %f", LiftMotor2.rotation(rotationUnits::deg));
            Brain.Screen.render();

        }
    }
};

int drive(){
    Drive m_Drive;
    m_Drive.driveOperation();
    return 0;
}

int lift(){
    Lift m_Lift;
    while (true){
        m_Lift.liftOperation();
    }
    return 0;
}
int claw(){
    Claw m_Claw;
    m_Claw.clawOperation();
    return 0;
}

int main() {

    //Clearing the screen of the controller
    Controller1.Screen.clearScreen();
    FrontLeft.setRotation(0, rotationUnits::deg);
    FrontRight.setRotation(0, rotationUnits::deg);
    BackLeft.setRotation(0, rotationUnits::deg);

    Controller1.Screen.setCursor( 1, 1 );
    //Starting all the threads by creating instances of the class

    FrontLeft.setRotation(0, rotationUnits::deg);
    FrontRight.setRotation(0, rotationUnits::deg);
    BackLeft.setRotation(0, rotationUnits::deg);
    BackRight.setRotation(0, rotationUnits::deg);

    vex::task t_drive(drive);
    vex::task t_Lift(lift);
    vex::task t_Claw(claw);

    //vex::task t_Lift(m_Lift.liftOperation);

    while (true) {
       if (Controller1.ButtonX.pressing()){
           FrontLeft.setRotation(0,rotationUnits::deg);
           BackLeft.setRotation(0,rotationUnits::deg);
           FrontRight.setRotation(0,rotationUnits::deg);
           BackRight.setRotation(0,rotationUnits::deg);
           LiftMotor1.setRotation(0,rotationUnits::deg);
           LiftMotor2.setRotation(0,rotationUnits::deg);
           ClawMotor.setRotation(0,rotationUnits::deg);
           Intake.setRotation(0,rotationUnits::deg);
       }
       vex::task::sleep(10);
    }
    return 0;
}
